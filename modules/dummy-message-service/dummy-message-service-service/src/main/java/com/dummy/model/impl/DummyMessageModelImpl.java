/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.dummy.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.dummy.model.DummyMessage;
import com.dummy.model.DummyMessageModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import java.io.Serializable;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the DummyMessage service. Represents a row in the &quot;dummy_messages_gen&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DummyMessageModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DummyMessageImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see DummyMessageImpl
 * @see DummyMessage
 * @see DummyMessageModel
 * @generated
 */
@ProviderType
public class DummyMessageModelImpl extends BaseModelImpl<DummyMessage>
	implements DummyMessageModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dummy message model instance should use the {@link DummyMessage} interface instead.
	 */
	public static final String TABLE_NAME = "dummy_messages_gen";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "text_", Types.VARCHAR },
			{ "tag", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("text_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tag", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table dummy_messages_gen (id_ LONG not null primary key,text_ VARCHAR(75) null,tag VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table dummy_messages_gen";
	public static final String ORDER_BY_JPQL = " ORDER BY dummyMessage.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY dummy_messages_gen.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.dummy.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.com.dummy.model.DummyMessage"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.dummy.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.com.dummy.model.DummyMessage"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.dummy.service.util.ServiceProps.get(
				"lock.expiration.time.com.dummy.model.DummyMessage"));

	public DummyMessageModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DummyMessage.class;
	}

	@Override
	public String getModelClassName() {
		return DummyMessage.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<DummyMessage, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<DummyMessage, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<DummyMessage, Object> attributeGetterFunction = entry.getValue();

			attributes.put(attributeName,
				attributeGetterFunction.apply((DummyMessage)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<DummyMessage, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<DummyMessage, Object> attributeSetterBiConsumer = attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((DummyMessage)this,
					entry.getValue());
			}
		}
	}

	public Map<String, Function<DummyMessage, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<DummyMessage, Object>> getAttributeSetterBiConsumers() {
		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<DummyMessage, Object>> _attributeGetterFunctions;
	private static final Map<String, BiConsumer<DummyMessage, Object>> _attributeSetterBiConsumers;

	static {
		Map<String, Function<DummyMessage, Object>> attributeGetterFunctions = new LinkedHashMap<String, Function<DummyMessage, Object>>();
		Map<String, BiConsumer<DummyMessage, ?>> attributeSetterBiConsumers = new LinkedHashMap<String, BiConsumer<DummyMessage, ?>>();


		attributeGetterFunctions.put(
			"id",
			new Function<DummyMessage, Object>() {

				@Override
				public Object apply(DummyMessage dummyMessage) {
					return dummyMessage.getId();
				}

			});
		attributeSetterBiConsumers.put(
			"id",
			new BiConsumer<DummyMessage, Object>() {

				@Override
				public void accept(DummyMessage dummyMessage, Object id) {
					dummyMessage.setId((Long)id);
				}

			});
		attributeGetterFunctions.put(
			"text",
			new Function<DummyMessage, Object>() {

				@Override
				public Object apply(DummyMessage dummyMessage) {
					return dummyMessage.getText();
				}

			});
		attributeSetterBiConsumers.put(
			"text",
			new BiConsumer<DummyMessage, Object>() {

				@Override
				public void accept(DummyMessage dummyMessage, Object text) {
					dummyMessage.setText((String)text);
				}

			});
		attributeGetterFunctions.put(
			"tag",
			new Function<DummyMessage, Object>() {

				@Override
				public Object apply(DummyMessage dummyMessage) {
					return dummyMessage.getTag();
				}

			});
		attributeSetterBiConsumers.put(
			"tag",
			new BiConsumer<DummyMessage, Object>() {

				@Override
				public void accept(DummyMessage dummyMessage, Object tag) {
					dummyMessage.setTag((String)tag);
				}

			});


		_attributeGetterFunctions = Collections.unmodifiableMap(attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap((Map)attributeSetterBiConsumers);
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_id = id;
	}

	@Override
	public String getText() {
		if (_text == null) {
			return "";
		}
		else {
			return _text;
		}
	}

	@Override
	public void setText(String text) {
		_text = text;
	}

	@Override
	public String getTag() {
		if (_tag == null) {
			return "";
		}
		else {
			return _tag;
		}
	}

	@Override
	public void setTag(String tag) {
		_tag = tag;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DummyMessage.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DummyMessage toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DummyMessage)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DummyMessageImpl dummyMessageImpl = new DummyMessageImpl();

		dummyMessageImpl.setId(getId());
		dummyMessageImpl.setText(getText());
		dummyMessageImpl.setTag(getTag());

		dummyMessageImpl.resetOriginalValues();

		return dummyMessageImpl;
	}

	@Override
	public int compareTo(DummyMessage dummyMessage) {
		long primaryKey = dummyMessage.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DummyMessage)) {
			return false;
		}

		DummyMessage dummyMessage = (DummyMessage)obj;

		long primaryKey = dummyMessage.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<DummyMessage> toCacheModel() {
		DummyMessageCacheModel dummyMessageCacheModel = new DummyMessageCacheModel();

		dummyMessageCacheModel.id = getId();

		dummyMessageCacheModel.text = getText();

		String text = dummyMessageCacheModel.text;

		if ((text != null) && (text.length() == 0)) {
			dummyMessageCacheModel.text = null;
		}

		dummyMessageCacheModel.tag = getTag();

		String tag = dummyMessageCacheModel.tag;

		if ((tag != null) && (tag.length() == 0)) {
			dummyMessageCacheModel.tag = null;
		}

		return dummyMessageCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<DummyMessage, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((4 * attributeGetterFunctions.size()) +
				2);

		sb.append("{");

		for (Map.Entry<String, Function<DummyMessage, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<DummyMessage, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((DummyMessage)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<DummyMessage, Object>> attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler((5 * attributeGetterFunctions.size()) +
				4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<DummyMessage, Object>> entry : attributeGetterFunctions.entrySet()) {
			String attributeName = entry.getKey();
			Function<DummyMessage, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((DummyMessage)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DummyMessage.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DummyMessage.class, ModelWrapper.class
		};
	private long _id;
	private String _text;
	private String _tag;
	private DummyMessage _escapedModel;
}